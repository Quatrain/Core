import { User } from '../User'
import { Core, statuses } from '../..'
import { MockAdapter } from '../../backends'
import { UserData, UserUri } from './fixtures/dao'

MockAdapter.inject(UserData)
Core.addBackend(new MockAdapter(), '@mock', true)

describe('User object', () => {
   test('has properties that are instances', () =>
      User.factory().then((obj) => {
         // own properties
         expect(Object.keys(obj.dataObject.properties)).toHaveLength(15)
         expect(obj.get('firstname').constructor.name).toBe('StringProperty')
         expect(obj.get('lastname').constructor.name).toBe('StringProperty')
         expect(obj.get('email').constructor.name).toBe('StringProperty')
         expect(obj.get('password').constructor.name).toBe('HashProperty')
         expect(obj.get('entity').constructor.name).toBe('ObjectProperty')
         // herited properties
         expect(obj.get('name').constructor.name).toBe('StringProperty')
         expect(obj.get('status').constructor.name).toBe('EnumProperty')
         expect(obj.get('createdAt').constructor.name).toBe('DateTimeProperty')
         expect(obj.get('updatedAt').constructor.name).toBe('DateTimeProperty')
      }))

   test('can be persisted in backend', () => {
      User.factory()
         .then((obj) => {
            expect(obj.uid).toBeUndefined()
            obj.set('name', 'a name')
            obj.save().then(() => {
               expect(obj.uid).not.toBeUndefined()
               expect(obj.val('name')).toEqual('a name')
               expect(obj.val('status')).toEqual(statuses.ACTIVE)
            })
         })
         .catch((e) => console.log(e))
   })

   test('can be populated with data from backend', () => {
      User.factory(UserUri)
         .then((obj) => {
            expect(obj.val('name')).toEqual('John Doe')
            expect(obj.val('status')).toEqual(statuses.ACTIVE)
         })
         .catch((e) => console.log(e))
   })
})
